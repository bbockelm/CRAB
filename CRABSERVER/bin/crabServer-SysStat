#!/usr/bin/env python
"""
crabServer-SysStat-launch

launcher of SysStat sensors for crabServer components and other stuff

"""

import os
import sys
import getopt
import subprocess
import re
import time
import string

try:
    from ProdAgentCore.Configuration import loadProdAgentConfiguration
    from ProdAgentCore.Configuration import ProdAgentConfiguration
    from ProdAgentCore.DaemonDetails import DaemonDetails
except ImportError, ex:
    msg = "Unable to import ProdAgent Python modules:\n"
    msg += "There may be a problem with your PYTHONPATH env variable\n"
    print msg
    sys.exit(1)
    
    
def Kill(process,signal):
    try:
        os.kill(int(process),signal)
    except OSError,err:
        err = str(err)
        if err.find("No such process") > 0:
            pass
        else:
            raise
        
def usage():

    usage = \
    """
    Usage: crabServer-SysStat <--start|--shutdown|--statuts> <opts>
           You must provide either --start OR --shutdown OR --status

           You can optionally specify the crabServer Config file with
           --config otherwise it will expect to get the config file from
           the $PRODAGENT_CONFIG environment variable

           You can optionally specify the crabServer components list with
           --components=<comp> otherwise it will act on all component
           listed in the crabServer Config file and all services

           You can optionally specify the crabServer services list with
           --services=<serv> otherwise it will act on all component 
           listed in the crabServer Config file and all services
           Available services are: GridFTP and mySQL

           --start starts up the SysStat sensors
           --shutdown shutsdown the SysStat sensors
           --status prints the status of the SysStat sensors
    """
    print usage


# # # #

valid = ['config=', 'start', 'shutdown', 'status', 'restart',
         'services=', 'components=', 'resources=', 'disks=']
try:
    opts, args = getopt.getopt(sys.argv[1:], "", valid)
except getopt.GetoptError, ex:
    print str(ex)
    usage()
    sys.exit(1)


def extractList(arg):
    targetList = arg.split(',')
    List = []
    for item in targetList:
        if item.strip == "":
            continue
        List.append(item)
    return List
    
config = None
command = None
Targets = {'C':'Component','S':'Service', 'R':'Resource', 'D':'Disk'} 
SpecifiedList = {}
for T in Targets.keys():
    SpecifiedList[T] = None

for opt, arg in opts:
    if opt == "--config":
        config = arg
    if opt == "--start":
        if command != None:
            msg = "Command specified twice:\n"
            msg += usage()
            print msg
            sys.exit(1)
        command = "start"
    if opt == "--shutdown":
        if command != None:
            msg = "Command specified twice:\n"
            msg += usage()
            print msg
            sys.exit(1)
        command = "shutdown"
    if opt == "--status":
        if command != None:
            msg = "Command specified twice:\n"
            msg += usage()
            print msg
            sys.exit(1)
        command = "status"
    if opt == "--restart":
        if command != None:
            msg = "Command specified twice:\n"
            msg += usage()
            print msg
            sys.exit(1)
        command = "restart"
    if opt == "--components":
        SpecifiedList['C'] = extractList(arg)
    if opt == "--services": 
        SpecifiedList['S'] = extractList(arg)
    if opt == "--resources":
        SpecifiedList['R'] = extractList(arg)
    if opt == "--disks":
        SpecifiedList['D'] = extractList(arg)
            
if config == None:            
    configFile = os.environ.get("PRODAGENT_CONFIG", None)
    if config == None:
        msg = "No ProdAgent Config file provided\n"
        msg += "either set $PRODAGENT_CONFIG variable\n"
        msg += "or provide the --config option"

try:
    config = loadProdAgentConfiguration()
except StandardError, ex:
    msg = "Unable to read the configuration file:\n"
    msg += "%s\n" % configFile
    msg += "Error:\n"
    msg += str(ex)
    print msg
    sys.exit(1)

cfgObject = ProdAgentConfiguration()
cfgObject.loadFromFile(configFile)

###
### Full list of *S*ervices, *R*esources, *C*omponents and *D*isks ###
All = {}
All['S'] = {'GridFTP':'globus-gridftp-server',       #  shortcut: command name
            'mySQL':'mysqld' } 
All['R'] = { 'CPU':'-u',                             #  shortcut: sar option
             'MEM':'-r',
             'SWAP':'-W',
             'LOAD':'-q' }    
All['C'] = {}
for comp in cfgObject.listComponents():
    All['C'][comp] = comp                            # component: component
disks = os.popen('ls -1 /dev/?d[a-z]').readlines()
disks = map(lambda x:x.split('/')[2].rstrip(),disks)
All['D'] = {}
for disk in disks:
    All['D'][disk] = '-d'                            #      disk: iostat option 

###
### Full pipelines commands (sar/iostat, grep, awk...) ###
### For Resources and Disks ###
shell = {}
shell['sensor'] = {} # sar,iostat...
shell['select'] = {} # awk
shell['filter'] = {} # grep
shell['filter']['CPU']  = ['grep', '--line-buffered', 'all']
shell['filter']['MEM']  = ['grep', '--line-buffered', '-v', 'kbmemfree\|Linux\|^$']
shell['filter']['SWAP'] = ['grep', '--line-buffered', '-v', 'pswpin\|Linux\|^$']
shell['filter']['LOAD'] = ['grep', '--line-buffered', '-v', 'ldavg\|Linux\|^$']
shell['select']['CPU']   = '{ print strftime("%m/%d/%y#%H:%M:%S   %s") "        " $4 "    " $5 "    " $6 "    " $7 "    " $8; fflush()}'+"\n"
shell['select']['MEM']   = '{ print strftime("%m/%d/%y#%H:%M:%S   %s") "        " $6 "    " $7 "    " ($4-$6-$7) "    " $10; fflush()}'+"\n"
shell['select']['SWAP']  = '{ print strftime("%m/%d/%y#%H:%M:%S   %s") "        " $3 "    " $4; fflush()}  '+"\n"
shell['select']['LOAD']  = '{ print strftime("%m/%d/%y#%H:%M:%S   %s") "        " $5 "    " $6 "    " $7; fflush()}'+"\n"
for R in All['R'].keys():
    shell['sensor'][R] = ["sar", All['R'][R], str(60), str(0)]
for D in All['D'].keys():
    shell['sensor'][D] = ["iostat", '-dk', D , str(60)]
    shell['filter'][D] = ['grep', '--line-buffered', D]
    shell['select'][D] = '{ print strftime("%m/%d/%y#%H:%M:%S   %s") "        " $3 "    " $4 "    " $5 "    " $6; fflush()}'+"\n"


List = {}
for T in Targets.keys():
    if SpecifiedList[T] != None:
        msg = "% 12s List Specified: "%Targets[T]
        msg += str(SpecifiedList[T]).replace('\'', '')
        print msg
        if 'All' in SpecifiedList[T] or 'all' in SpecifiedList[T]:
            List[T] = All[T].keys()
        else:
            if set(SpecifiedList[T]).issubset(set(All[T].keys())):
                List[T] = SpecifiedList[T]
            else:
                print "Error! Following %ss are not known:"%Targets[T]
                for NotKnown in set(SpecifiedList[T]).difference(set(All[T].keys())):
                    print NotKnown
                sys.exit(1)
    else:
        List[T] = All[T].keys()
        otherTs = Targets.copy(); del otherTs[T]; # otherTs = all other target keys
        for oT in otherTs:
            if not SpecifiedList[oT] is None:
                List[T] = []
                break
        

def getComponentDir(component):
    compCfg = cfgObject.getConfig(component)
    try:
        compDir = compCfg['ComponentDir']
    except StandardError, ex:
        msg = "Unable to find component:\n"
        msg += "%s\n" % component
        msg += "Error:\n"
        msg += str(ex)
        print msg
        sys.exit(1)  
    compDir = os.path.expandvars(compDir)
    return compDir

def isComponentRunning(component):
    if not component in All['C'].keys():
        print "component %s not known..."%str(component)
        sys.exit(1)
    compDir = getComponentDir(component)
    daemonXml = os.path.join(compDir, "Daemon.xml")
    if not os.path.exists(daemonXml):
        print "Warn: CrabServer component %s not running" % component
        print "Hint: start the component first"
        return False
    daemon = DaemonDetails(daemonXml)
    if not daemon.isAlive():
        print "Warn: CrabServer component %s not running" % component
        return False
    else:
        return True

def isServiceRunning(service):
    if not service in All['S'].keys():
        print "service %s not known..."%str(service)
        sys.exit(1)
    if os.popen("ps -C %s wwho pid"%All['S'][service]):
        return True
    else:
        print "Warn: service %s (%s) is not running" %(service,All['S'][service])
        print "Hint: start the service first"
        return False

def isSensorDaemonRunning(target):
    # get all sensors pids with their component/service pid
    sensors = os.popen('ps -C sensord wwho pid,cmd').readlines()
    for sensor in sensors:
        spid,Rcomp = sensor.split()[0:4:3]
        if re.search(target,Rcomp):
            return True, spid
    return False, 0

def isSensorRunning(target):
    # first, look for disks sensors:
    if target in All['D'].keys():
        sensors = os.popen('ps -C iostat wwho pid,cmd').readlines()
        for sensor in sensors:
            spid, disk = sensor.split()[0:4:3]
            if re.match(disk,target):
                return True, spid, 0
    # else, get all other sensors 
    sensors = os.popen('ps -C sar wwho pid,cmd').readlines()
    for sensor in sensors:
        [spid,dummy,type,tpid] = sensor.split()[0:4]
        if target in All['R'].keys():
            if re.match(All['R'][target],type):
                return True, spid, 0
            else:
                continue
        elif re.match('-X',type) or re.match('-x',type):
            Rtarget = os.popen('ps -p '+str(tpid)+' wwho cmd').read()
            if target in All['C'].keys():
                T = 'C'
            else:
                T = 'S'
            if re.search(All[T][target],Rtarget):
                return True, spid, tpid
    return False, 0, 0

def Cstartup():
    for component in List['C']:
        if not isComponentRunning(component):
            print "\033[0;31mits sensor will NOT be activated\033[m"
        else:
            srunning, spid, tpid = isSensorRunning(component)
            if srunning:
                print "sensor for component %s (%s) \033[0;33malready running\033[m with pid %s" % (component,tpid,spid)
            else:
                sdaemon = subprocess.Popen(["sensord",component])
                time.sleep(1)
                sdaemon.poll()
                if sdaemon.returncode is None:
                    print "sensor for component %s \033[0;32mstarted\033[m" % (component)
                else:
                    print "\033[0;31mERROR\033[m while starting sensor for component %s" % (component)

def Sstartup():
    for service in List['S']:
        if not isServiceRunning(service):
            print "sensor will NOT be activated"
            continue
        srunning, spid, tpid = isSensorRunning(service)
        if srunning:
            print "sensor for service %s (%s) \033[0;33malready running\033[m with pid %s" % (service,tpid,spid)
        else:
            sdaemon = subprocess.Popen(["sensord",service])
            time.sleep(1)
            sdaemon.poll()
            if sdaemon.returncode is None:
                print "sensor for service %s(%s) \033[0;32mstarted\033[m" % (service,All['S'][service])
            else:
                print "\033[0;31mERROR\033[m while starting sensor for service %s(%s)" %  (service,All['S'][service])

def RnDLaunch(target):
    HTTPFeDir = getComponentDir("HTTPFrontend")
    awkPRGfilename="%s/sensors/%s-awk.prg"%(HTTPFeDir,target)
    FILE = open(awkPRGfilename,"w")
    #FILE.writelines(awkPRG[target])
    FILE.writelines(shell['select'][target])
    FILE.close()
    awkCMD = ['awk', "--file", awkPRGfilename]
    sensordOUT="%s/sensors/%s-pidstat.dat"%(HTTPFeDir,target)
    FILE = open(sensordOUT,"a")
    sarP = subprocess.Popen(shell['sensor'][target],bufsize=1,stdout=subprocess.PIPE);
    grepP = subprocess.Popen(shell['filter'][target],bufsize=1,stdin=sarP.stdout,stdout=subprocess.PIPE)
    sdaemon = subprocess.Popen(awkCMD,bufsize=1,stdin=grepP.stdout,stdout=FILE)
    print "a few seconds please..."
    time.sleep(3)
    sdaemon.poll()
    return sarP.pid, sdaemon.returncode
    

def Rstartup():
    HTTPFeDir = getComponentDir("HTTPFrontend")
    for resource in List['R']:
        running, spid, devs = isSensorRunning(resource) # isSensorRunning(All['R'][resource])
        if running:
            print "sensor for resource %s (sar %s) \033[0;33malready running\033[m with pid %s" % (resource,All['R'][resource],spid)
        else:
            pid, returncode = RnDLaunch(resource)
            if returncode is None:
                print "sensor for resource %s (%s %s) \033[0;32mstarted\033[m with pid %s" % (
                    resource,
                    shell['sensor'][resource][0],
                    shell['sensor'][resource][1],
                    str(pid))
            else:
                print "\033[0;31mERROR\033[m while starting sensor for resource %s (%s %s): return code: %s" % (
                    resource,shell['sensor'][resource][0],
                    shell['sensor'][resource][1],
                    str(returncode)
                    )
               

def Dstartup():
    HTTPFeDir = getComponentDir("HTTPFrontend")
    diskL = All['D'].keys()
    sensors = os.popen('ps -C iostat wwho pid,cmd').readlines()
    for sensor in sensors:
        spid, dev = sensor.split()[0:4:3]
        print "sensor for disk %s \033[0;33malready\033[m running with pid %s" % (dev,spid)
        diskL.remove(dev)
    for dev in diskL:
        pid, returncode = RnDLaunch(dev)
        if returncode is None:
            print "sensor for disk %s \033[0;32mstarted\033[m with pid %s"%(dev,str(pid))
        else:
            print "\033[0;31mERROR\033[m while starting sensor for disk %s: return code: %s"%(dev,str(returncode))

   

def Cstatus():
    componentsL = List['C'][:]
    cRE=re.compile("|".join(componentsL))
    sensors = os.popen('ps -C sar wwho pid,cmd').readlines()
    for sensor in sensors:
        [spid,dummy,type,tpid] = sensor.split()[0:4]
        if re.match('-X',type) or re.match('-x',type):
            # find component process
            process = os.popen('ps -p '+str(tpid)+' wwho cmd').read()
            component = cRE.search(process)
            if component:                    # if search matched (search return None or a MatchObject)
                component=component.group()  # return what is matched, i.e. the component name itself
                if component in List['C']:
                    print "Running sensor for%8s, \033[0;32m%-19s\033[m:%8s"%(tpid,component,spid)
                    componentsL.remove(component)
    for component in componentsL:
        srun, tpid = isSensorDaemonRunning(component)
        if srun:
            print "sensor  is ready to attach: \033[0;33m%-18s\033[m :%8s"%(component,tpid)
        else:
            print "WARN: sensor for component: \033[0;31m%-18s\033[m : NOT RUNNING"%component


def Sstatus():
    servicesL = []  # service process name
    servicesK = {}  # service keys (shortcut)
    for service in List['S']:
        servicesL.append(All['S'][service])
        servicesK[All['S'][service]] = service
    sRE=re.compile("|".join(servicesL))
    sensors = os.popen('ps -C sar wwho pid,cmd').readlines()
    for sensor in sensors:
        [spid,dummy,type,tpid] = sensor.split()[0:4]
        if re.match('-X',type) or re.match('-x',type):
            process = os.popen('ps -p '+str(tpid)+' wwho cmd').read()
            service = sRE.search(process)
            if service:                 # if search matched (search return None or a MatchObject)
                service=service.group() # return what is matched, i.e. the service process name itself
                if service in servicesL:
                    print "Running sensor for%8s, \033[0;32m%-19s\033[m:%8s"%(tpid,servicesK[service],spid) #,service)
                    servicesL.remove(service)
    for service in servicesL:
        print "WARN:  sensor  for service: \033[0;31m%-18s\033[m : NOT RUNNING"%(servicesK[service]) #,service)

def Rstatus():
    resourcesL = List['R'][:] 
    sensors = os.popen('ps -C sar wwho pid,cmd').readlines()
    for sensor in sensors:
        [spid,dummy,type,tpid] = sensor.split()[0:4]
        for resource in List['R']:
            if re.match(All['R'][resource],type):
                print "Running sensor for:         \033[0;32m%-19s\033[m:%8s"%(resource,spid)
                resourcesL.remove(resource)
    for resource in resourcesL:
        print "WARN:  sensor  for:         \033[0;31m%-19s\033[m: NOT RUNNING"%(resource)

def Dstatus():
    disksL = List['D'][:] 
    sensors = os.popen('ps -C iostat wwho pid,cmd').readlines()
    for sensor in sensors:
        [spid, dev] = sensor.split()[0:4:3]
        for disk in disksL:
            if re.match(disk,dev):
                print "Running iostat sensor for:  \033[0;32m%-19s\033[m:%8s" % (dev,spid)
                disksL.remove(dev)
                break
    for disk in disksL:
        print "WARN: iostat sensor for:    \033[0;31m%-19s\033[m: NOT running"%disk


banner = {
    'C':"### COMPONENTs CPU(%) USAGE SENSORs ###",
    'S':"###  SERVICEs CPU(%) USAGE SENSORs  ###",
    'R':"###     RESOURCEs USAGE SENSORs     ###",
    'D':"###     I/O DISKs USAGE SENSORs     ###",
    }



def Cshutdown():
    componentsL = List['C'][:]
    sensors = os.popen('ps -C sensord wwho pid,cmd').readlines()
    for sensor in sensors:
        sensorPid,target= sensor.split()[0:4:3]
        if target in List['C']:
            print "Found running sensor for %-18s: %6s, Shutting Down!"%(target,sensorPid)
            sarPid = os.popen('ps --ppid '+str(sensorPid)+' wwho pid,cmd | grep sar').read()
            sadcPid = ""
            if sarPid != "":
                sarPid = sarPid.split()[0]
                sadcPid = os.popen('ps --ppid '+str(sarPid)+' wwho pid,cmd | grep sadc').read()
                if sadcPid != "":
                    sadcPid = sadcPid.split()[0]
            Kill(int(sensorPid), 9)
            if sarPid != "":
                Kill(int(sarPid),9)
            if sadcPid != "":
                Kill(int(sadcPid),9)
            componentsL.remove(target)
            break
    for component in componentsL:
        print "sensor for %s is NOT running"%component

def Sshutdown():
    servicesL = []
    servicesK = {}
    for service in List['S']:
        servicesL.append(All['S'][service])
        servicesK[All['S'][service]] = service
    sensors = os.popen('ps -C sensord wwho pid,cmd').readlines()
    for sensor in sensors:
        sensorPid,target= sensor.split()[0:4:3]
        if target in List['S']:
            print "Found running sensor for %-18s: %6s, Shutting Down!"%(target,sensorPid)
            sarPid = os.popen('ps --ppid '+str(sensorPid)+' wwho pid,cmd | grep sar').read()
            sadcPid = ""
            if sarPid != "":
                sarPid = sarPid.split()[0]
                sadcPid = os.popen('ps --ppid '+str(sarPid)+' wwho pid,cmd | grep sadc').read()
                if sadcPid != "":
                    sadcPid = sadcPid.split()[0]
            Kill(int(sensorPid), 9)
            if sarPid != "":
                Kill(int(sarPid),9)
            if sadcPid != "":
                Kill(int(sadcPid),9)
            servicesL.remove(All['S'][target])
            break
    for service in servicesL:
        print "sensor for %s is NOT running"%service


def Rshutdown():
    resourcesL = List['R'][:]
    sensors = os.popen('ps -C sar wwho pid,cmd').readlines()
    for sensor in sensors:
        [sarPid,dummy,type,cpid] = sensor.split()[0:4]
        for resource in List['R']:
            if re.match(All['R'][resource],type):
                print "Found %-4s sensor running with pid % 8s, Shutting Down!"%(resource,sarPid)
                sarPid = sarPid.split()[0]
                sadcPid = os.popen('ps --ppid '+str(sarPid)+' wwho pid,cmd | grep sadc').read()
                if sadcPid != "":
                    sadcPid = sadcPid.split()[0]
                Kill(int(sarPid),9)
                if sadcPid != "":
                    Kill(int(sadcPid),9)
                resourcesL.remove(resource)
                break
    for resource in resourcesL:
        if resource in All['R'].keys():
            print "sensor for %s is NOT running"%resource



def Dshutdown():
    disksL = List['D'][:] 
    sensors = os.popen('ps -C iostat wwho pid,cmd').readlines()
    for sensor in sensors:
        [spid, dev] = sensor.split()[0:4:3]
        for disk in disksL:
            if re.match(disk,dev):
                print "Found running iostat sensor for:  %-19s:%8s. Shutting Down!" % (dev,spid)
                spid = spid.split()[0]
                Kill(int(spid),9)
                disksL.remove(dev)
                break
    for disk in disksL:
        if resource in All['D'].keys():
            print "WARN: iostat sensor for:    %-19s: NOT running"%disk


Startup = {
    'C':Cstartup,
    'S':Sstartup,
    'R':Rstartup,
    'D':Dstartup,
    }

Status = {
    'C':Cstatus,
    'S':Sstatus,
    'R':Rstatus,
    'D':Dstatus,
    }

Shutdown = {
    'C':Cshutdown,
    'S':Sshutdown,
    'R':Rshutdown,
    'D':Dshutdown,
    }


def status():
    for T in Targets.keys():
        if len(List[T]) >0:
            print banner[T]
            Status[T]()

def startup():
    for T in Targets.keys():
        if len(List[T]) >0:
            print banner[T]
            Startup[T]()

def shutdown():
    for T in Targets.keys():
        if len(List[T]) >0:
            print banner[T]
            Shutdown[T]()


if command == "start":
    startup()
    sys.exit(0)
elif command == "shutdown":
    shutdown()
    sys.exit(0)
elif command == "status":
    status()
    sys.exit(0)
elif command == "restart":
    shutdown()
    startup()
    sys.exit(0)





