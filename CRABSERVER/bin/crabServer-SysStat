#!/usr/bin/env python
"""
crabServer-SysStat-launch

launcher of SysStat sensors for crabServer components and other stuff

"""

import os
import sys
import getopt
import subprocess
import re
import time
import string

try:
    from ProdAgentCore.Configuration import loadProdAgentConfiguration
    from ProdAgentCore.Configuration import ProdAgentConfiguration
    from ProdAgentCore.DaemonDetails import DaemonDetails
except ImportError, ex:
    msg = "Unable to import ProdAgent Python modules:\n"
    msg += "There may be a problem with your PYTHONPATH env variable\n"
    print msg
    sys.exit(1)

def usage():

    usage = \
    """
    Usage: crabServer-SysStat <--start|--shutdown|--statuts> <opts>
           You must provide either --start OR --shutdown OR --status

           You can optionally specify the crabServer Config file with
           --config otherwise it will expect to get the config file from
           the $PRODAGENT_CONFIG environment variable

           You can optionally specify the crabServer components list with
           --components=<comp> otherwise it will act on all component
           listed in the crabServer Config file and all services

           You can optionally specify the crabServer services list with
           --services=<serv> otherwise it will act on all component 
           listed in the crabServer Config file and all services
           Available services are: GridFTP and mySQL

           --start starts up the SysStat sensors
           --shutdown shutsdown the SysStat sensors
           --status prints the status of the SysStat sensors
    """
    print usage


# # # #

valid = ['config=', 'start', 'shutdown', 'status', 'restart',
         'services=', 'components=', 'resources=']
AllServices = {'GridFTP':'globus-gridftp-server','mySQL':'mysqld'}
AllResources = {'CPU':'-u','MEM':'-r', 'SWAP':'-W'}
awkPRG = {}
grepCMD = {}
grepCMD['CPU'] = ['grep', '--line-buffered', 'all']
grepCMD['MEM'] = ['grep', '--line-buffered', '-v', 'kbmemfree\|Linux\|^$']
grepCMD['SWAP'] = ['grep', '--line-buffered', '-v', 'pswpin\|Linux\|^$']
awkPRG['CPU'] = '{ print strftime("%m/%d/%y#%H:%M:%S   %s") "        " $4 "    " $5 "    " $6 "    " $7 "    " $8; fflush()}'+"\n"
awkPRG['MEM'] = '{ print strftime("%m/%d/%y#%H:%M:%S   %s") "        " $3 "    " $4 "    " $5 "    " $6 "    " $7 "    " $8 "    " $9 "    " $10 "    " $11; fflush()}  '+"\n"
awkPRG['SWAP']= '{ print strftime("%m/%d/%y#%H:%M:%S   %s") "        " $3 "    " $4; fflush()}  '+"\n"

try:
    opts, args = getopt.getopt(sys.argv[1:], "", valid)
except getopt.GetoptError, ex:
    print str(ex)
    usage()
    sys.exit(1)

config = None
command = None
componentsList = None
servicesList = None
resourcesList = None

for opt, arg in opts:
    if opt == "--config":
        config = arg
    if opt == "--start":
        if command != None:
            msg = "Command specified twice:\n"
            msg += usage()
            print msg
            sys.exit(1)
        command = "start"
    if opt == "--shutdown":
        if command != None:
            msg = "Command specified twice:\n"
            msg += usage()
            print msg
            sys.exit(1)
        command = "shutdown"
    if opt == "--status":
        if command != None:
            msg = "Command specified twice:\n"
            msg += usage()
            print msg
            sys.exit(1)
        command = "status"
    if opt == "--restart":
        if command != None:
            msg = "Command specified twice:\n"
            msg += usage()
            print msg
            sys.exit(1)
        command = "restart"
    if opt == "--components":
        compList = arg.split(',')
        componentsList = []
        for item in compList:
            if item.strip == "":
                continue
            componentsList.append(item)
    if opt == "--services":
        srvcList = arg.split(',')
        servicesList = []
        for item in srvcList:
            if item.strip == "":
                continue
            servicesList.append(item)
    if opt == "--resources":
        rsrcList = arg.split(',')
        resourcesList = []
        for item in rsrcList:
            if item.strip == "":
                continue
            resourcesList.append(item)

            
if config == None:            
    configFile = os.environ.get("PRODAGENT_CONFIG", None)
    if config == None:
        msg = "No ProdAgent Config file provided\n"
        msg += "either set $PRODAGENT_CONFIG variable\n"
        msg += "or provide the --config option"


try:
    config = loadProdAgentConfiguration()
except StandardError, ex:
    msg = "Unable to read the configuration file:\n"
    msg += "%s\n" % configFile
    msg += "Error:\n"
    msg += str(ex)
    print msg
    sys.exit(1)

cfgObject = ProdAgentConfiguration()
cfgObject.loadFromFile(configFile)


if componentsList != None:
    msg = "Components List Specified:\n"
    msg += str(componentsList).replace('\'', '')
    print msg
    components = componentsList
else:
    if servicesList == None and resourcesList == None:
        components = cfgObject.listComponents()
    else:
        components = []

if servicesList != None:
    msg = "Services List Specified:\n"
    msg += str(servicesList).replace('\'', '')
    print msg
    services = servicesList
else:
    if componentsList == None and resourcesList == None:
        services = AllServices.keys()
    else:
        services = []


if resourcesList != None:
    msg = "Resources List Specified:\n"
    msg += str(resourcesList).replace('\'', '')
    print msg
    resources = resourcesList
else:
    if componentsList == None and servicesList == None:
        resources = AllResources.keys()
    else:
        resources = []


def getComponentDir(component):
    compCfg = cfgObject.getConfig(component)
    try:
        compDir = compCfg['ComponentDir']
    except StandardError, ex:
        msg = "Unable to find component:\n"
        msg += "%s\n" % component
        msg += "Error:\n"
        msg += str(ex)
        print msg
        sys.exit(1)
    compDir = os.path.expandvars(compDir)
    return compDir

def isServiceRunning(service):
    if not service in AllServices.keys():
        print "service %s not known..."%str(service)
        sys.exit(1)
    if os.popen("ps -C %s wwho pid"%AllServices[service]):
        return True
    else:
        return False


def isSensorRunning(target):
    # get all sensors pids with their component pid
    sensors = os.popen('ps -C sar wwho pid,cmd').readlines()
    for sensor in sensors:
        [spid,dummy,type,cpid] = sensor.split()[0:4]
        if not (re.match('-X',type) or re.match('-x',type)):
            if re.match(target,type):
                return True, spid, 0
            else:
                continue
        Rcomp = os.popen('ps -p '+str(cpid)+' wwho cmd').read()  #.split('/')[-2]
        if re.search(target,Rcomp):
            return True, spid, cpid
    return False, 0, 0

def isSensorDaemonRunning(comp):
    # get all sensors pids with their component pid
    sensors = os.popen('ps -C sensord wwho pid,cmd').readlines()
    for sensor in sensors:
        spid,Rcomp = sensor.split()[0:4:3]
        if re.search(comp,Rcomp):
            return True, spid
    return False, 0


def startup():
    HTTPFeDir = getComponentDir("HTTPFrontend")
    for component in components:
        compDir = getComponentDir(component)
        daemonXml = os.path.join(compDir, "Daemon.xml")
        if not os.path.exists(daemonXml):
            print "CrabServer component %s not running, sensor will NOT be activated" % component
            print "Hint: start the component first"
            continue
        daemon = DaemonDetails(daemonXml)
        if not daemon.isAlive():
            print "CrabServer component %s not running, sensor will NOT be activated" % component
        else:
            running, spid, cpid = isSensorRunning(component)
            if running:
                print "sensor for component %s(%s) already running with pid %s" % (component,cpid,spid)
            else:
                sdaemon = subprocess.Popen(["sensord",component])
                time.sleep(1)
                sdaemon.poll()
                if sdaemon.returncode is None:
                    print "sensor for component %s(%s) started" % (component,daemon['ProcessID'])
                else:
                    print "ERROR while starting sensor for component %s(%s)" % (component,daemon['ProcessID'])
                    sys.exit(1)
    for service in services:
        if not isServiceRunning(service):
            print "Service %s (%s) is not running, sensor will NOT be activated" %(service,AllServices[service])
            print "Hint: start the service first"
            continue
        running, spid, cpid = isSensorRunning(AllServices[service])
        if running:
            print "sensor for service %s (%s) already running with pid %s" % (service,cpid,spid)
        else:
            sdaemon = subprocess.Popen(["sensord",service])
            time.sleep(1)
            sdaemon.poll()
            if sdaemon.returncode is None:
                print "sensor for service %s(%s) started" % (service,AllServices[service])
            else:
                print "ERROR while starting sensor for service %s(%s)" %  (service,AllServices[service])
                sys.exit(1)
    for resource in resources:
        running, spid, dummy = isSensorRunning(AllResources[resource])
        if running:
            print "sensor for resource %s (sar %s) already running with pid %s" % (resource,AllResources[resource],spid)
        else:
            sarCMD = ["sar", AllResources[resource], str(60), str(0)]
            awkPRGfilename="%s/sensors/%s-awk.prg"%(HTTPFeDir,resource)
            FILE = open(awkPRGfilename,"w")
            FILE.writelines(awkPRG[resource])
            FILE.close()
            awkCMD = ['awk', "--file", awkPRGfilename]
            sensordOUT="%s/sensors/%s-pidstat.dat"%(HTTPFeDir,resource)
            FILE = open(sensordOUT,"a")
            sarP = subprocess.Popen(sarCMD,bufsize=1,stdout=subprocess.PIPE);
            grepP = subprocess.Popen(grepCMD[resource],bufsize=1,stdin=sarP.stdout,stdout=subprocess.PIPE)
            sdaemon = subprocess.Popen(awkCMD,bufsize=1,stdin=grepP.stdout,stdout=FILE)
            print "a few seconds please..."
            time.sleep(3)
            sdaemon.poll()
            if sdaemon.returncode is None:
                print "sensor for resource %s (sar %s) started" % (resource,AllResources[resource])
            else:
                print "ERROR while starting sensor for resource %s (sar %s): return code: " % (resource,AllResources[resource],str(sdaemon.returncode))
                sys.exit(1)


        

def status():
    componentsL = components[:]
    servicesL = []
    servicesK = {}
    resourcesL = AllResources.keys()
    for service in services:
        servicesL.append(AllServices[service])
        servicesK[AllServices[service]] = service
    sRE=re.compile("|".join(servicesL))
    cRE=re.compile("|".join(componentsL))
    sensors = os.popen('ps -C sar wwho pid,cmd').readlines()
    for sensor in sensors:
        [spid,dummy,type,cpid] = sensor.split()[0:4]
        for resource in resources:
            if re.match(AllResources[resource],type):
                print "Found %-4s sensor running with pid % 8s"%(resource,spid)
                resourcesL.remove(resource)
        if re.match('-X',type) or re.match('-x',type):
            process = os.popen('ps -p '+str(cpid)+' wwho cmd').read()
            component = cRE.search(process)
            service = sRE.search(process)
            if component: component = component.group()
            if service:   service = service.group()
        else: component = ""; service = "";
        if component in components:
            print "Found running sensor for %6s, %-18s: %8s"%(cpid,component,spid)
            componentsL.remove(component)
        if service in servicesL:
            print "Found running sensor for %6s, %-18s: %8s (%s)"%(cpid,servicesK[service],spid,service)
            servicesL.remove(service)
    for component in componentsL:
        srun, cpid = isSensorDaemonRunning(component)
        if srun: print "sensor %s is going to attach component %-18s"%(cpid,component)
        else:    print "sensor for component %-18s is not running"%component
    for service in servicesL:
        print "sensor for service %-20s is not running (%s)"%(servicesK[service],service)
    for resource in resourcesL:
        print "sensor for %-20s is not running"%(resource)


def shutdown():
    componentsL = components[:]
    servicesL = []
    servicesK = {}
    resourcesL = AllResources.keys()
    for service in services:
        servicesL.append(AllServices[service])
        servicesK[AllServices[service]] = service
    sensors = os.popen('ps -C sar wwho pid,cmd').readlines()
    for sensor in sensors:
        [spid,dummy,type,cpid] = sensor.split()[0:4]
        sarPid = 0
        for resource in resources:
            if re.match(AllResources[resource],type):
                print "Found %-4s sensor running with pid % 8s, Shutting Down!"%(resource,spid)
                resourcesL.remove(resource)
                sarPid = spid
                continue
        if sarPid > 0:
            sarPid = sarPid.split()[0]
            sadcPid = os.popen('ps --ppid '+str(sarPid)+' wwho pid,cmd | grep sadc').read()
            if sadcPid != "":
                sadcPid = sadcPid.split()[0]
            os.kill(int(sarPid),9)
            if sadcPid != "":
                os.kill(int(sadcPid),9)
    sensors = os.popen('ps -C sensord wwho pid,cmd').readlines()
    for sensor in sensors:
        sensorPid,target= sensor.split()[0:4:3]
        if target in components:
            print "Found running sensor for %-18s: %6s, Shutting Down!"%(target,sensorPid)
            componentsL.remove(target)
        elif target in services:
            print "Found running sensor for %-18s: %6s, Shutting Down!"%(target,sensorPid)
            servicesL.remove(AllServices[target])
        else:
            sensorPid = 0
        if sensorPid > 0:
            sarPid = os.popen('ps --ppid '+str(sensorPid)+' wwho pid,cmd | grep sar').read()
            sadcPid = ""
            if sarPid != "":
                sarPid = sarPid.split()[0]
                sadcPid = os.popen('ps --ppid '+str(sarPid)+' wwho pid,cmd | grep sadc').read()
                if sadcPid != "":
                    sadcPid = sadcPid.split()[0]
            os.kill(int(sensorPid), 9)
            if sarPid != "":
                os.kill(int(sarPid),9)
            if sadcPid != "":
                os.kill(int(sadcPid),9)
    for component in componentsL:
        print "sensor for %s is NOT running"%component
    for service in servicesL:
        print "sensor for %s is NOT running"%service

if command == "start":
    startup()
    sys.exit(0)
elif command == "shutdown":
    shutdown()
    sys.exit(0)
elif command == "status":
    status()
    sys.exit(0)
elif command == "restart":
    shutdown()
    startup()
    sys.exit(0)
