#!/usr/bin/env python
"""
sensord

daemon for Component and Services CPU sensors 

"""

import os
import sys
import subprocess
import re
import time
import string

try:
    target = sys.argv[1]
except IndexError, ex:
    msg = "\033[31mERROR!\033[m A component or a service must be specified!"
    print msg
    sys.exit(1)

All = {}
All['S'] = {'GridFTP':'globus-gridftp-server',       #  shortcut: command name
            'mySQL':'mysqld' } 

x = ['mySQL', 'TaskTracking', 'HTTPFrontend', 'TaskLifeManager', 'ErrorHandler', 'CommandManager', 'AdminControl', 'Notification']

if target in All['S'].keys():
    targetType = 'service'
else:
    try:
        from ProdAgentCore.Configuration import ProdAgentConfiguration
        from ProdAgentCore.DaemonDetails import DaemonDetails   
    except ImportError, ex:
        msg = "Unable to import ProdAgent Python modules:\n"
        msg += "There may be a problem with your PYTHONPATH env variable\n"
        print msg
        sys.exit(1)

    configFile = os.environ.get("PRODAGENT_CONFIG", None)
    if configFile == None:
        msg = "No ProdAgent Config file provided\n"
        msg += "set $PRODAGENT_CONFIG variable\n"
        print msg
        sys.exit(1)

    cfgObject = ProdAgentConfiguration()
    cfgObject.loadFromFile(configFile)
    All['C'] = {}
    for comp in cfgObject.listComponents():
        All['C'][comp] = comp  
    if target in All['C'].keys():
        targetType = 'component'
    else:
        msg = "\033[31mERROR!\033[m Unknown target %s"%target
        print msg
        sys.exit(1)
    
        
path = "%s/HTTPFrontend/sensors"%os.environ.get("PRODAGENT_WORKDIR", None)
if path == None:
    print "No $PRODAGENT_WORKDIR available: setup crabserver environment!"
    sys.exit(1)
os.system("mkdir -p %s"%path)

def log(target,msg):
    logfilename = "%s-pidstatDBG.log"%target
    path = "%s/HTTPFrontend/sensors"%os.environ.get("PRODAGENT_WORKDIR", None)
    FILE = open("%s/%s"%(path,logfilename),"a")
    FILE.writelines("%s   %s: %s\n"%(time.strftime('%d/%m/%y#%H:%M:%S'),int(time.time()),msg))
    FILE.close()


def ComponentPid(target):
    compCfg = cfgObject.getConfig(target)
    try:
        compDir = compCfg['ComponentDir']
    except StandardError, ex:
        msg = "Unable to find component:\n"
        msg += "%s\n" % target
        msg += "Error:\n"
        msg += str(ex)
        print msg
        sys.exit(1)
    compDir = os.path.expandvars(compDir)
    daemonXml = os.path.join(compDir, "Daemon.xml")
    if not os.path.exists(daemonXml):
        print "Not Running - path"
        sys.exit(1)
    daemon = DaemonDetails(daemonXml)
    if daemon.isAlive():
        return daemon['ProcessID']
    else:
        return None

def ServicePid(target):
    if target == 'mySQL':
        tpids = os.popen("ps -C %s wwho pid"%All['S'][target]).read()
        if re.match('\s*[0-9]+\s*',str(tpids)):
            return str(tpids).split()[0]
        else:
            return None
    elif target == 'GridFTP':
        tpids = os.popen("ps -C %s wwho pgid,pid"%All['S'][target]).readlines()
        for ipid in tpids:
            if re.match('\s*[0-9]+\s*[0-9]+\s*',str(ipid)):
                pgid, pid = str(ipid).split()[0:2]
                if pid == pgid:
                    return pid.rstrip()
    return None

Pid = {
    'component':ComponentPid,
    'service':ServicePid
    }

def exciseSar(targetPid):
    os.system("ps -C sar wwho pid,cmd | grep -i 'sar -X %s ' | awk '{print $1}' | xargs kill -9"%targetPid)
    os.system("ps -C sadc wwho pid,cmd | grep -i ' -X %s' | awk '{print $1}' | xargs kill -9"%targetPid)


log(target," * * * start sensord for %s %s"%(targetType,target))
targetedPid = None
while True:
    while True:   # sleep loop
        runningPid = Pid[targetType](target)
        if runningPid is None:
            log(target,"%s %s not running, will search again in a minute..."%(targetType,target))
            if targetedPid is None:
                log(target,"no sar process leftover found, already killed.")
            else:
                log(target,"in the meanwhile killing old sar istance for old pid %s."%targetedPid)
                exciseSar(targetedPid)
                targetedPid = None
            break   # exit sleep loop: start sar because there is no runningPid target!
        elif runningPid != targetedPid:
            if targetedPid is None:
                log(target,"Previous targeted pid unknown: searching for possible already running sar sensor for %s %s..."%(targetType,target))
                if os.system("ps -C sar wwho pid,cmd | grep -i 'sar -X %s' > /dev/null "%str(targetedPid)) == 0: # such sar process exists
                    log(target," ...sar process for %s %s with old pid %s already running: killing!"%(targetType,target,str(targetedPid)))
                    exciseSar(targetedPid)
                else:
                    log(target," ...not found, already killed.")
            else:
                log(target,"%s %s was restarted. Now killing sar process for old %s with pid %s"%(targetType,target,targetType,str(targetedPid)))
                exciseSar(targetedPid)
                log(target,"The new pid to be monitored is now: %s"%(str(runningPid)))
            targetedPid = runningPid
            break   # exit sleep loop: start sar because runningPid target is not previous one!
        time.sleep(60)
    # here is out of sleep loop: starting sar:
    if targetedPid is not None:
        sar=os.popen("which sar 2>/dev/null").readline().rstrip().lstrip()
        if sar == '':
            msg = "sar program not isntalled. Please install the sysstat package."
            print msg
            sys.exit(1)
        log(target,"starting %s for %s %s with pid %s"%(sar,targetType,target,str(targetedPid)))
        if target in x:
            sarCMD = [sar, '-x', str(targetedPid), str(60), str(0) ]
        else:
            sarCMD = [sar, '-X', str(targetedPid), str(60), str(0) ]
        grepCMD = [ 'grep', '--line-buffered', str(targetedPid) ]
        awkPRGfilename="%s/%s-awk.prg"%(path,target)
        FILE = open(awkPRGfilename,"w")
        FILE.writelines('{ print strftime("%m/%d/%y#%H:%M:%S   %s") "      " $6 "   " $7 "   " ($6+$7); fflush()}')
        FILE.close()
        awkCMD = ['awk', "--file", awkPRGfilename]
        sensordOUT="%s/%s-pidstatDBG.dat"%(path,target)
        FILE = open(sensordOUT,"a")
        log(target,"%s | %s | %s >> %s"%(' '.join(sarCMD),' '.join(grepCMD),' '.join(awkCMD),sensordOUT))
        sarP = subprocess.Popen(sarCMD,bufsize=1,stdout=subprocess.PIPE);
        grepP = subprocess.Popen(grepCMD,bufsize=1,stdin=sarP.stdout,stdout=subprocess.PIPE)
        sdaemon = subprocess.Popen(awkCMD,bufsize=1,stdin=grepP.stdout,stdout=FILE)
        log(target,"a few seconds please...")
        time.sleep(3)
        sdaemon.poll()
        #sarP.pid, sdaemon.returncode
        if sdaemon.returncode is None:
            log(target,"sar for %s %s started with pid %s" % (targetType,target,str(sarP.pid)))
        else:
            log(target,"ERROR while starting sar for %s %s: return code: %s" % (targetType,target,str(sdaemon.returncode)))

