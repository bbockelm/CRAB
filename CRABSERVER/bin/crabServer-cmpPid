#!/usr/bin/env python
"""
crabServer-SysStat-launch

launcher of SysStat sensors for crabServer components and other stuff

"""

import os
import sys
import getopt

try:
    from ProdAgentCore.Configuration import loadProdAgentConfiguration
    from ProdAgentCore.Configuration import ProdAgentConfiguration
    from ProdAgentCore.DaemonDetails import DaemonDetails
except ImportError, ex:
    msg = "Unable to import ProdAgent Python modules:\n"
    msg += "There may be a problem with your PYTHONPATH env variable\n"
    print msg
    sys.exit(1)

def usage():

    usage = \
    """
    Usage: crabServer-cmpPid --component=<comp> 

           You can optionally specify the crabServer Config file with
           --config otherwise it will expect to get the config file from
           the $PRODAGENT_CONFIG environment variable
           
    """
    print usage


# # # #

valid = ['config=', 'component=']

try:
    opts, args = getopt.getopt(sys.argv[1:], "", valid)
except getopt.GetoptError, ex:
    print str(ex)
    usage()
    sys.exit(1)

config = None
component = None

for opt, arg in opts:
    if opt == "--config":
        config = arg
    if opt == "--component":
        component = arg
            
if config == None:            
    configFile = os.environ.get("PRODAGENT_CONFIG", None)
    if config == None:
        msg = "No ProdAgent Config file provided\n"
        msg += "either set $PRODAGENT_CONFIG variable\n"
        msg += "or provide the --config option"

try:
    config = loadProdAgentConfiguration()
except StandardError, ex:
    msg = "Unable to read the configuration file:\n"
    msg += "%s\n" % configFile
    msg += "Error:\n"
    msg += str(ex)
    print msg
    sys.exit(1)

cfgObject = ProdAgentConfiguration()
cfgObject.loadFromFile(configFile)

compCfg = cfgObject.getConfig(component)
try:
    compDir = compCfg['ComponentDir']
except StandardError, ex:
    msg = "Unable to find component:\n"
    msg += "%s\n" % component
    msg += "Error:\n"
    msg += str(ex)
    print msg
    sys.exit(1)
compDir = os.path.expandvars(compDir)
daemonXml = os.path.join(compDir, "Daemon.xml")
if not os.path.exists(daemonXml):
    print "Not Running - path"
    sys.exit(1)
daemon = DaemonDetails(daemonXml)
if not daemon.isAlive():
#    print "Not Running"
    sys.exit(1)
else:
    print "%s" % (daemon['ProcessID'])
        


