#!/usr/bin/env python
"""
_crabServer-new-config_

Command line tool for generating a ProdAgentConfiguration for CrabServer

Requires that PRODAGENT_CONFIG be set to provide the location
of the configuration file being created

It works by calling prodagent-new-config to create the configuration
for the common components, and then setting the new components.

Code is based on prodAgent-new-config and prodAgent-edit-config

"""

import os
import socket
import sys
import getopt
import time

from ProdAgentCore.Configuration import ProdAgentConfiguration
from ProdAgentCore.Configuration import loadProdAgentConfiguration
from ProdAgentCore.Configuration import ConfigBlock

def usage():
    """print usage info"""
    strg = "Usage: crabServer-new-config <options>\n"
    strg += " --config=<configFileName> : Config will be written into\n"
    strg += "   file provided, else it will be written to $PRODAGENT_CONFIG\n"

    print strg


valid = ["config="]
try:
    opts, args = getopt.getopt(sys.argv[1:], "", valid)
except getopt.GetoptError, ex:
    print str(ex)
    usage()
    sys.exit(1)

configFile = None

for opt, arg in opts:
    if opt == "--config":
        configFile = arg


if configFile == None:
    configFile = os.environ.get("PRODAGENT_CONFIG", None)
    if configFile == None:
        print "Configfile not found:"
        print "Must be provided either via $PRODAGENT_CONFIG env var"
        print "Or via --config option"
        sys.exit(1)

homeDir=os.environ.get("PRODAGENT_ROOT")
if  homeDir == None:
    print "PRODAGENT_ROOT variable not found:"
    print "Must be provided either via $PRODAGENT_ROOT env var"
    sys.exit(1)


# core fields not associated to components

crabServerConfiguration = {
    'WMSserviceList':'',
    'baseConfUrl': '',
    'configFileName': '',
    'CacheDir':'',
    'credentialType':'Proxy',
    'scheduler':'gLite',
    'ProxiesDir':'/tmp/del_proxies/',
    'crabServerschemaLocation' : "$CRAB_SERVER_ROOT/share/CrabServerDB.sql",
    'storageName':'localhost',
    'storagePort':'',
    'storagePath':None,
    'Protocol':'local',
    'glExecDelegation':'false'
}

# component fields

componentFields = {
    "TaskRegister" : {
    'ComponentDir':None,
    'maxThreads':'5',
    },

    "CrabJobCreator" : {
    'ComponentDir':None,
    'maxThreads':'5',
    },

    "CrabServerWorker" : {
    'ComponentDir':None,
    'glexec':'/full/path/to/glexec',
    'glexecWrapper':'/full/path/to/glexec wrapper script',
    'renewProxy':'/full/path/to/proxy renewal script',
    'maxThreads':'5',
    },

    "CommandManager": {
    'ComponentDir':None,
    'acceptableThroughput':'-1',
    'acceptableClient':'',
    'Port':'20081',
    },

    "TaskTracking" : {
    'ComponentDir':None,
    'Thread':'5',
    'PollInterval':'20',
    'debugLevel':'9',
    },

    "Notification" : {
    'ComponentDir':None,
    'NotificationDelay':'10',
    'Notification_per_job':'false',
    'Notification_per_task':'true',
    'Notification_SenderName': None,
    'Notification_SenderPwd': None,
    'Notification_SMTPServer': None,
    'Notification_SMTPServerDBGLVL': '3',
    'debugLevel':'9',
    },

    "TaskLifeManager": {
    "taskLife": "30:00:00",
    "eMailAdmin": None,
    "pollingTimeCheck": 10*60,
    "checkProxy": "on",
    },

    ## impored from PA
    'AdminControl' : {
    "ComponentDir" : None,
    "Bots" : "RestartBot,MessageBot",
    "BotPeriod" : "12:00:00",
    },

    'ErrorHandler' : {
    "ComponentDir" : None,
    "MaxCacheDirSizeMB" : 80,
    "DelayFactor" : 100,
    "ReportAction" : "noMove",
    "RssFeed": "no",
    "QueueFailures": False,
    "RunHandlerName" : "crabRunFailureHandler"
    },


    "HTTPFrontend" : {
    "InstallerModule" : "Plugins.HTTPFrontend.CrabServerTools",
    "ComponentDir" : None,
    "FirstRun" : None,
    "HWmonitorLogFile" : None,
    },

}

# call ProdAgent configuration tool

print "Creating ProdAgent configuration\n"

#os.system("prodAgent-new-config --components=JobSubmitter,JobTracking,ErrorHandler,RssFeeder,JobKiller,GetOutput,HTTPFrontend")
#os.system("prodAgent-new-config --components=JobTracking,GetOutput,ErrorHandler,JobKiller,HTTPFrontend")
os.system("prodAgent-new-config --components=JobTracking,GetOutput,JobKiller")

# read configuration

try:
    config = loadProdAgentConfiguration()
except StandardError, ex:
    msg = "Unable to read the configuration file:\n"
    msg += "%s\n" % configFile
    msg += "Error:\n"
    msg += str(ex)
    print msg
    sys.exit(1)

# get core fields

prodAgentBlock = config.getConfig("ProdAgent")

# update core fields

config['CrabServerConfigurations'] = ConfigBlock("CrabServerConfigurations")
for parameter, value in crabServerConfiguration.items():
    config['CrabServerConfigurations'][parameter] = value

## set default fields
#try:
#    config['CrabServerConfigurations']['bossClads'] = os.path.join(prodAgentBlock['ProdAgentWorkDir'], "BOSS/config/")

#   config['JobSubmitter']['SubmitterName'] = "RESubmitter"
#    config['JobKiller']['KillerName'] = "BOSSKiller"
#except Exception, ex:
#    msg = "\n Unable to configure the component file: "
#    msg += str(ex) + "\n"
#    print msg

# create new components

for component in componentFields:
    compDict = componentFields.get(component, None)

    cfg = config.newComponentConfig(component)
    cfg.update(compDict)
    cfg['ComponentDir'] = os.path.join(prodAgentBlock['ProdAgentWorkDir'],
                                       component)

config.saveToFile(configFile)

