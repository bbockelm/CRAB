/* CRAB-Proxy.h
   Generated by wsdl2h 1.2.9l from CRAB-Proxy.wsdl and typemap.dat
   2007-12-10 12:43:04 GMT
   Copyright (C) 2001-2007 Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/* NOTE:

 - Compile this file with soapcpp2 to complete the code generation process.
 - Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control schema namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) to browse this file.
 - Use wsdl2h option -l to view the software license terms.

   DO NOT include this file directly into your project.
   Include only the soapcpp2-generated headers and source code files.
*/

//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * http://www.example.org/CRAB-Proxy/                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://www.example.org/CRAB-Proxy/"

*/

//gsoap ns1   schema namespace:	http://www.example.org/CRAB-Proxy/
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Schema Types                                                               *
 *                                                                            *
\******************************************************************************/


/// Primitive built-in type "xs:integer"
typedef char *xsd__integer;


//  Forward declaration of class ns1__transferTaskType.
class ns1__transferTaskType;

//  Forward declaration of class ns1__sendCommandType.
class ns1__sendCommandType;

/// "http://www.example.org/CRAB-Proxy/":transferTaskType is a complexType.
class ns1__transferTaskType
{ public:
/// Attribute taskDescriptor of type xs:string.
   @char*                                taskDescriptor                 0;	///< Optional attribute.
/// Attribute cmdDescriptor of type xs:string.
   @char*                                cmdDescriptor                  0;	///< Optional attribute.
/// Attribute uuid of type xs:string.
   @char*                                uuid                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://www.example.org/CRAB-Proxy/":sendCommandType is a complexType.
class ns1__sendCommandType
{ public:
/// Attribute cmdDescriptor of type xs:string.
   @char*                                cmdDescriptor                  0;	///< Optional attribute.
/// Attribute uuid of type xs:string.
   @char*                                uuid                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	CRAB_ProxySOAP 
//gsoap ns1  service type:	CRAB_Proxy 
//gsoap ns1  service port:	http://www.example.org/ 
//gsoap ns1  service namespace:	http://www.example.org/CRAB-Proxy/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage CRAB-Proxy Definitions

@section CRAB_Proxy_bindings Bindings
  - @ref CRAB_ProxySOAP

*/

/**

@page CRAB_ProxySOAP Binding "CRAB_ProxySOAP"

@section CRAB_ProxySOAP_operations Operations of Binding  "CRAB_ProxySOAP"
  - @ref ns1__transferTaskAndSubmit
  - @ref ns1__sendCommand
  - @ref ns1__getTaskStatus

@section CRAB_ProxySOAP_ports Endpoints of Binding  "CRAB_ProxySOAP"
  - http://www.example.org/

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * SOAP Fault Detail                                                          *
 *                                                                            *
\******************************************************************************/

/**

The SOAP Fault is part of the gSOAP context and its content is accessed
through the soap.fault->detail variable (SOAP 1.1) or the
soap.fault->SOAP_ENV__Detail variable (SOAP 1.2).
Use option -j to omit.

*/
struct SOAP_ENV__Detail
{
    int                                  __type                        ;	///< set to SOAP_TYPE_X for a serializable type X
    void                                *fault                         ;	///< points to serializable object X or NULL
    _XML                                 __any                         ;	///< Catch any element content in XML string.
    char*                                _ns1__fault                   ;
///< SOAP Fault type "xs:string" part "fault"
///< SOAP Fault type "xs:string" part "fault"
///< SOAP Fault type "xs:string" part "fault"
};

/******************************************************************************\
 *                                                                            *
 * CRAB_ProxySOAP                                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * ns1__transferTaskAndSubmit                                                 *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__transferTaskAndSubmitResponse" of service binding "CRAB_ProxySOAP" operation "ns1__transferTaskAndSubmit"
struct ns1__transferTaskAndSubmitResponse
{
    xsd__integer                        transferTaskAndSubmitResponse;
};

/// Operation "ns1__transferTaskAndSubmit" of service binding "CRAB_ProxySOAP"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP action="http://www.example.org/CRAB-Proxy/transferTaskAndSubmit"
  - SOAP Fault: fault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__transferTaskAndSubmit(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__transferTaskType*              transferTaskAndSubmitRequest,
    // response parameters:
    struct ns1__transferTaskAndSubmitResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__transferTaskAndSubmit(
    struct soap *soap,
    // request parameters:
    ns1__transferTaskType*              transferTaskAndSubmitRequest,
    // response parameters:
    struct ns1__transferTaskAndSubmitResponse&
  );
@endcode

C++ proxy class (defined in soapCRAB_ProxySOAPProxy.h):
  class CRAB_ProxySOAP;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	transferTaskAndSubmit rpc
//gsoap ns1  service method-encoding:	transferTaskAndSubmit literal
//gsoap ns1  service method-action:	transferTaskAndSubmit http://www.example.org/CRAB-Proxy/transferTaskAndSubmit
//gsoap ns1  service method-fault:	transferTaskAndSubmit ns1__fault
int ns1__transferTaskAndSubmit(
    ns1__transferTaskType*              transferTaskAndSubmitRequest,	///< Request parameter
    struct ns1__transferTaskAndSubmitResponse&	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__sendCommand                                                           *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__sendCommandResponse" of service binding "CRAB_ProxySOAP" operation "ns1__sendCommand"
struct ns1__sendCommandResponse
{
    xsd__integer                        sendCommandResponse;
};

/// Operation "ns1__sendCommand" of service binding "CRAB_ProxySOAP"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP action="http://www.example.org/CRAB-Proxy/sendCommand"
  - SOAP Fault: fault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__sendCommand(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    ns1__sendCommandType*               sendCommandRequest,
    // response parameters:
    struct ns1__sendCommandResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__sendCommand(
    struct soap *soap,
    // request parameters:
    ns1__sendCommandType*               sendCommandRequest,
    // response parameters:
    struct ns1__sendCommandResponse&
  );
@endcode

C++ proxy class (defined in soapCRAB_ProxySOAPProxy.h):
  class CRAB_ProxySOAP;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	sendCommand rpc
//gsoap ns1  service method-encoding:	sendCommand literal
//gsoap ns1  service method-action:	sendCommand http://www.example.org/CRAB-Proxy/sendCommand
//gsoap ns1  service method-fault:	sendCommand ns1__fault
int ns1__sendCommand(
    ns1__sendCommandType*               sendCommandRequest,	///< Request parameter
    struct ns1__sendCommandResponse    &	///< Response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * ns1__getTaskStatus                                                         *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "ns1__getTaskStatusResponse" of service binding "CRAB_ProxySOAP" operation "ns1__getTaskStatus"
struct ns1__getTaskStatusResponse
{
    char*                               getTaskStatusResponse;
};

/// Operation "ns1__getTaskStatus" of service binding "CRAB_ProxySOAP"

/**

Operation details:

  - SOAP RPC literal style
  - SOAP action="http://www.example.org/CRAB-Proxy/getTaskStatus"
  - SOAP Fault: fault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__getTaskStatus(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    char*                               getTaskStatusRequest,
    // response parameters:
    struct ns1__getTaskStatusResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__getTaskStatus(
    struct soap *soap,
    // request parameters:
    char*                               getTaskStatusRequest,
    // response parameters:
    struct ns1__getTaskStatusResponse&
  );
@endcode

C++ proxy class (defined in soapCRAB_ProxySOAPProxy.h):
  class CRAB_ProxySOAP;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap ns1  service method-style:	getTaskStatus rpc
//gsoap ns1  service method-encoding:	getTaskStatus literal
//gsoap ns1  service method-action:	getTaskStatus http://www.example.org/CRAB-Proxy/getTaskStatus
//gsoap ns1  service method-fault:	getTaskStatus ns1__fault
int ns1__getTaskStatus(
    char*                               getTaskStatusRequest,	///< Request parameter
    struct ns1__getTaskStatusResponse  &	///< Response struct parameter
);

/* End of CRAB-Proxy.h */
