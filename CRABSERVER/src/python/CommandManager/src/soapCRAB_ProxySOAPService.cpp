/* soapCRAB_ProxySOAPService.cpp
   Generated by gSOAP 2.7.9l from CRAB-Proxy.h
   Copyright(C) 2000-2007, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapCRAB_ProxySOAPService.h"

CRAB_ProxySOAPService::CRAB_ProxySOAPService()
{	
	CRAB_ProxySOAPService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	initPy();
}

CRAB_ProxySOAPService::CRAB_ProxySOAPService(soap_mode iomode)
{	
	CRAB_ProxySOAPService_init(iomode, iomode);
	initPy();
}

CRAB_ProxySOAPService::CRAB_ProxySOAPService(soap_mode imode, soap_mode omode)
{	
	CRAB_ProxySOAPService_init(imode, omode);
	initPy();
}

CRAB_ProxySOAPService::~CRAB_ProxySOAPService()
{ 
	finalizePy();
}

void CRAB_ProxySOAPService::CRAB_ProxySOAPService_init(soap_mode imode, soap_mode omode)
{	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns1", "http://www.example.org/CRAB-Proxy/", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_imode(this, imode);
	soap_omode(this, omode);
	if (!this->namespaces)
		this->namespaces = namespaces;
};

CRAB_ProxySOAPService *CRAB_ProxySOAPService::copy()
{	CRAB_ProxySOAPService *dup = new CRAB_ProxySOAPService();
	soap_copy_context(dup, this);
	return dup;
}

void CRAB_ProxySOAPService::soap_noheader()
{	header = NULL;
}

int CRAB_ProxySOAPService::run(int port)
{	if (soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()))
				return this->error;
			(void)serve();
		}
	}
	else
		return this->error;
	return SOAP_OK;
}

SOAP_SOCKET CRAB_ProxySOAPService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

SOAP_SOCKET CRAB_ProxySOAPService::accept()
{	return soap_accept(this);
}

int CRAB_ProxySOAPService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->max_keep_alive;
#endif
	do
	{	soap_begin(this);
#ifdef WITH_FASTCGI
		if (FCGI_Accept() < 0)
		{
			this->error = SOAP_EOF;
			return soap_send_fault(this);
		}
#endif

		soap_begin(this);

#ifndef WITH_FASTCGI
		if (this->max_keep_alive > 0 && !--k)
			this->keep_alive = 0;
#endif

		if (soap_begin_recv(this))
		{	if (this->error < SOAP_STOP)
			{
#ifdef WITH_FASTCGI
				soap_send_fault(this);
#else 
				return soap_send_fault(this);
#endif
			}
			soap_closesock(this);

			continue;
		}

		if (soap_envelope_begin_in(this)
		 || soap_recv_header(this)
		 || soap_body_begin_in(this)
		 || dispatch() || (this->fserveloop && this->fserveloop(this)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve_ns1__transferTaskAndSubmit(CRAB_ProxySOAPService*);
static int serve_ns1__sendCommand(CRAB_ProxySOAPService*);
static int serve_ns1__getTaskStatus(CRAB_ProxySOAPService*);

int CRAB_ProxySOAPService::dispatch()
{	if (soap_peek_element(this))
		return this->error;
	if (!soap_match_tag(this, this->tag, "ns1:transferTaskAndSubmit"))
		return serve_ns1__transferTaskAndSubmit(this);
	if (!soap_match_tag(this, this->tag, "ns1:sendCommand"))
		return serve_ns1__sendCommand(this);
	if (!soap_match_tag(this, this->tag, "ns1:getTaskStatus"))
		return serve_ns1__getTaskStatus(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve_ns1__transferTaskAndSubmit(CRAB_ProxySOAPService *soap)
{	struct ns1__transferTaskAndSubmit soap_tmp_ns1__transferTaskAndSubmit;
	struct ns1__transferTaskAndSubmitResponse _param_1;
	soap_default_ns1__transferTaskAndSubmitResponse(soap, &_param_1);
	soap_default_ns1__transferTaskAndSubmit(soap, &soap_tmp_ns1__transferTaskAndSubmit);
	soap->encodingStyle = NULL;
	if (!soap_get_ns1__transferTaskAndSubmit(soap, &soap_tmp_ns1__transferTaskAndSubmit, "ns1:transferTaskAndSubmit", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->transferTaskAndSubmit(soap_tmp_ns1__transferTaskAndSubmit.transferTaskAndSubmitRequest, _param_1);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns1__transferTaskAndSubmitResponse(soap, &_param_1);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__transferTaskAndSubmitResponse(soap, &_param_1, "ns1:transferTaskAndSubmitResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__transferTaskAndSubmitResponse(soap, &_param_1, "ns1:transferTaskAndSubmitResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns1__sendCommand(CRAB_ProxySOAPService *soap)
{	struct ns1__sendCommand soap_tmp_ns1__sendCommand;
	struct ns1__sendCommandResponse _param_2;
	soap_default_ns1__sendCommandResponse(soap, &_param_2);
	soap_default_ns1__sendCommand(soap, &soap_tmp_ns1__sendCommand);
	soap->encodingStyle = NULL;
	if (!soap_get_ns1__sendCommand(soap, &soap_tmp_ns1__sendCommand, "ns1:sendCommand", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->sendCommand(soap_tmp_ns1__sendCommand.sendCommandRequest, _param_2);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns1__sendCommandResponse(soap, &_param_2);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__sendCommandResponse(soap, &_param_2, "ns1:sendCommandResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__sendCommandResponse(soap, &_param_2, "ns1:sendCommandResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns1__getTaskStatus(CRAB_ProxySOAPService *soap)
{	struct ns1__getTaskStatus soap_tmp_ns1__getTaskStatus;
	struct ns1__getTaskStatusResponse _param_3;
	soap_default_ns1__getTaskStatusResponse(soap, &_param_3);
	soap_default_ns1__getTaskStatus(soap, &soap_tmp_ns1__getTaskStatus);
	soap->encodingStyle = NULL;
	if (!soap_get_ns1__getTaskStatus(soap, &soap_tmp_ns1__getTaskStatus, "ns1:getTaskStatus", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->getTaskStatus(soap_tmp_ns1__getTaskStatus.getTaskStatusRequest, _param_3);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns1__getTaskStatusResponse(soap, &_param_3);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__getTaskStatusResponse(soap, &_param_3, "ns1:getTaskStatusResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__getTaskStatusResponse(soap, &_param_3, "ns1:getTaskStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
