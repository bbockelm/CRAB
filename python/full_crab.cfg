[CRAB]
#
#   This section contains the default values for general parameters.
#   They can be set also as a command-line option, i.e.
#
#   key1 = value1
#   [SECTION]
#   key2 = value2
#
#   in this section corresponds to
#
#   crab.py -key1=value1 -key2=SECTION.value2
#
#   in the command line.
#
jobtype = cmssw

### Specify the scheduler to be used.
### Supported schedulers are : [ edg, glite, condor_g]
scheduler = glite

### To configure CRAB  as client set the name of the server
### (e.g. pi, lnl etc etc )
### CRAB will submit jobs to the server, which will submit and manage for the users
#server_name = cnaf

[CMSSW]

### The data you want to access (to be found on DBS)
### /primarydataset/datatier/processeddataset
#datasetpath=/ttbar_inclusive_TopRex/CMSSW_1_3_1-Spring07-1122/GEN-SIM-DIGI-RECO
datasetpath=none
### To run CRAB for private events production set datasetPath= None

### To select a single (list of) run within a single processed dataset define run number (list)
### selection can be a comma-separated list of run numbers and run number ranges: 1,2,3-4
#runselection=1,2,3-4

### To use a local DBS istance specify the related URL here.
# dbs_url = http://cmsdoc.cern.ch/cms/test/aprom/DBS/CGIServer/prodquery

### The name of ParameterSet to be used
pset=pythia.cfg

### Splitting parameters:
### Total number of events to be accessed: -1 means all
### NOTE: "-1" is not usable if no input
total_number_of_events=10

### Number of events to be processed per job
#events_per_job = 1000

### Number of jobs to be created per task
number_of_jobs = 5

### The output files produced by your application (comma separated list)
output_file = mcpool.root

### To run over the parent also set use_parent = True
# use_parent =

### Dataset of PU to import in the local DBS
#dataset_pu = /pileup/dataset/toimport

[USER]

### If CRAB.server_mode = 1
### To set Your e-mail address to be used by the server to notify you
#eMail = your_email_address

### To specify the percentage of finished job in a task, corresponding
### to when the notification email will be sent to you by the server default is 100%
#thresholdLevel = 100

### To specify additional files to be put in InputSandBox
### write the full path  if the files are not in the current directory
### (wildcard * are allowed): comma separated list
#additional_input_files = file1, file2, /full/path/file3

### To use a specific name of UI directory where CRAB will create job to submit (with full path).
### the default directory will be "crab_0_data_time"
#ui_working_dir = /full/path/Name_of_Directory


### OUTPUT file management ###
### To have back the job executable output into UI set return_data= 1
return_data = 1

### If return_data = 1 ###
### To specify the UI directory where to store the CMS executable output
### FULL path is mandatory. Default is  <ui_working_dir>/res will be used.
#outputdir= /full/path/yourOutDir

### If return_data = 1 ###
### To specify the UI directory where to store the stderr, stdout and .BrokerInfo of submitted jobs
### FULL path is mandatory. Default is <ui_working_dir>/res will be used.
#logdir= /full/path/yourLogDir

### To copy the CMS executable output into a SE (i:e castor) set copy_data = 1
copy_data = 0

### if copy_data = 1 ###
### Specify the name of the SE where to copy the CMS executable output.
#storage_element = srm.cern.ch
### Specify the SE directory (or the mountpoint) that has to be writable from all
#storage_path = /castor/cern.ch/user/u/user
### example for LNL SRM
#storage_element = t2-srm-02.lnl.infn.it
#storage_path = /srm/managerv1?SFN=/pnfs/lnl.infn.it/data/cms/store/user

### To specify the version of srm client to use.
#srm_version = 1

### To publish produced output in a local istance of DBS set publish_data = 1
publish_data=0
### Specify the dataset name. The full path will be <primarydataset>/<publish_data_name>/USER
#publish_data_name = yourDataName
### Specify the URL of DBS istance where CRAB has to publish the output files
#dbs_url_for_publication = http://cmssrv17.fnal.gov:8989/DBS108LOC1/servlet/DBSServlet

### To switch from status print on screen to DB serialization to a file specify here the destination files.
### CRAB will create it on CRAB_Working_Dir/share
#xml_report=

[EDG]

### To change the CMS-broker RB/WMS to be used. The ones available for CMS
### are "CERN" and "CNAF": the configuration
### files needed to change the broker will be automatically downloaded from CRAB web page.
### If the files are already present on the working directory they will be used.
#rb = CNAF

### CMS myproxy server, to proxy delegation
proxy_server = myproxy.cern.ch

### To specify  VOMS role and/or group
#role = superman
#group = superheros

### To skip the CRAB check of your proxy
#dont_check_proxy = 1

### To add other requirements to jdl file, as example the Operating System
#requirements = (other.GlueHostOperatingSystemName == "RedHat")

### To add other parameters to jdl file: semicolon separated list;
#additional_jdl_parameters = AllowZippedISB = false

### To use a specific WMS end point put here the right name:
#wms_service=

### To specify a cpu time and wall_clock_time(=real time) in minutes
#max_cpu_time = 60
#max_wall_clock_time = 60

### To manage White/Black lists: For discovery, please use http://cmslcgco01.cern.ch:8001/
### Use the dns domain (eg fnal, cern, ifae, fzk, cnaf, lnl,....) or the CMSSite name
### T1_US_FNAL. Only Tier2 centers have resources dedicated to user analysis.
### All the storage/computing elements (SE/CE) contained in the strings (comma separated list)
### will/will not be considered for submission.
### SE Black List:
se_black_list = T0,T1
### SE White List
#se_white_list = infn

### CE Black List:
#ce_black_list = infn
### CE White List:
#ce_white_list = infn

## fields written into jdl
virtual_organization = cms

## number or retry count
retry_count = 2

[CONDORG]

# Set this to condor to override the batchsystem defined in gridcat.
#batchsystem = condor

# Specify addition condor_g requirments
# use this requirment to run on a cms dedicated hardare
# globus_rsl = (condor_submit=(requirements 'ClusterName == \"CMS\" && (Arch == \"INTEL\" || Arch == \"X86_64\")'))
# use this requirement to run on the new hardware
#globus_rsl = (condor_submit=(requirements 'regexp(\"cms-*\",Machine)'))

