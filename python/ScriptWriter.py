from WorkSpace import WorkSpace
from JobList import JobList
from Scheduler import Scheduler
from crab_logger import Logger
from crab_exceptions import *
import common

import string

class ScriptWriter:
    def __init__(self, template):
        # pattern -> action
        self.actions = {
            'title' : self.title_,
            'setup_monitoring' : None,
            'setup_scheduler_environment' : None,
            'setup_jobtype_environment' : None,
            'copy_input_data' : None,
            'build_executable' : self.buildExe_,
            'run_executable' : self.runExe_,
            'stop_monitoring' : None,
            'move_output' : None,
            'register_results' : None,
            'make_summary' : None,
            'notify' : None
            }
        
        self.template = template
        self.nj = -1     # current job number
        return

    def setAction(self, pattern, action):
        self.actions[pattern] = action
        return
    
    def modifyTemplateScript(self, nj):
        """
        Create a script from scratch.
        """
        self.nj = nj
        
        tpl = open(self.template, 'r')
        script = open(common.job_list[nj].scriptFilename(), 'w')

        for line in tpl:
            if len(line) > 6 and line[:6] == '#CRAB ':
                act_str = string.strip(line[6:])
                try:
                    action = self.actions[act_str]
                except KeyError:
                    continue

                if action:
                    txt = action()
                    script.write(txt)
                    pass
                else:
                    script.write(line)
                pass
            else:
                script.write(line)
                pass
            pass

        script.close()
        tpl.close()
        return

    def title_(self):
        txt = '# This script was generated by '+common.prog_name
        txt += ' (version '+common.prog_version_str+').\n'
        return txt
    
    def setupEnvironment(self, script, nj):
        """ Write SetupEnvironment part of a job script."""

        script.write('#\n')
        script.write('# SETUP ENVIRONMENT\n')
        script.write('#\n')
        #TODO
        #common.scheduler.writeScript_SetupEnvironment(script, nj)
        #common.job_list[nj].type().writeScript_SetupEnvironment(script, nj)
        script.write('#\n')
        script.write('# END OF SETUP ENVIRONMENT\n')
        script.write('#\n')
        return

    def copyInputData(self, script, nj):
        #TODO
        #common.scheduler.writeScript_CopyInputData(script, nj)
        return

    def addFiles(self, script, nj):
        """
        Add into the script the content of some job-specific files.
        """
        #TODO: ???
        #common.job_list.type().writeScript_AddFiles(script, nj)
        return

    def buildExe_(self):
        """
        Returns part of a job script which builds the binary executable.
        """
        jbt = common.job_list.type()

        txt = jbt.writeScript_BuildExe(self.nj)

        job = common.job_list[self.nj]
        exe = job.type().executableName()

        txt += 'executable='+exe+'\n'
        return txt

    def runExe_(self):
        """
        Returns part of a job script which executes the application.
        """
        #jbt = common.job_list.type()

        #jbt.writeScript_RunExe(script, self.nj)
        return '$executable\n'

    def move_output(self, script,nj):
        return

    def registerResults(self, script,nj):
        return

    def tail(self, script, nj):
        """ Write a tailer part of a job script."""

        script.write('#\n')
        script.write('# TAIL\n')
        script.write('#\n')
        script.write('pwd\n')
        script.write('echo "ls -Al"\n')
        script.write('ls -Al\n')
        
        #if common.use_jam:
        #    script.write('list=`ls -Al` \n')
        #    script.write('perl $RUNTIME_AREA/'+ common.run_jam +' --name='+common.output_jam+' --event=List_end --det="$list" \n')
        #    pass
   
        script.write('#\n')

        #TODO
        #if common.flag_mksmry:
        #    script.write('chmod u+x postprocess\n')
        #    script.write('cat `ls -1 *.stdout` | ./postprocess | sort | uniq > sumry\n')
        #    pass

        #TODO
        # summary file may need jobtype specific info, e.g.
        # for CMS Oscar it needs Pool catalogues,
        # so we delegate operations to the related jobtype object.
        #common.job_list.type().writeScript_Tail(script, nj)
    
        #if common.flag_notify:
        #    script.write('if [[ $executable_exit_status -eq 0 && $replica_exit_status -eq 0 ]]; then\n')
        #    if common.flag_mksmry:
        #        script.write('    cat sumry | mail -s "job_finished" '+
        #                     common.email +'\n')
        #    else:
        #        script.write('    mail -s "job_finished" '+
        #                     common.email +' <<EOF\n')
        #        n1 = nj + 1
        #        script.write('Job # '+`n1`+' finished\n')
        #        script.write('EOF\n')
        #        pass
        #    script.write('fi\n')
        #    pass

        script.write('echo ">>>>>>>> End of job at date `date`" \n')
        
        #if common.use_jam:
        #    script.write('perl $RUNTIME_AREA/'+ common.run_jam +' --name='+common.output_jam+' --event=exit --det="$exit_status" \n')
        #    pass
        
        script.write('exit $exit_status\n')
        return

